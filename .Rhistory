in_path          <- file.path("raw_data")
out_path         <- file.path("01_project_data")
survey_out_path  <- file.path(out_path, "survey_data")
function_path    <- file.path("functions")
psytool_path     <- file.path("raw_data", "psytoolkit")
cogtest_out_path <- file.path(out_path, "experiment_data")
discarded_path   <- file.path(out_path, "discarded")
# Ensure key folders exist
dir.create(discarded_path,   recursive = TRUE, showWarnings = FALSE)
dir.create(survey_out_path,  recursive = TRUE, showWarnings = FALSE)
dir.create(cogtest_out_path, recursive = TRUE, showWarnings = FALSE)
## Source required functions ---------------------------------------------------
source(file.path(function_path, "separate_by_project.R"))
source(file.path(function_path, "remove_test_rows.R"))
source(file.path(function_path, "copy_psytool_files.R"))
source(file.path(function_path, "extract_pilot_by_vpid.R"))
source(file.path(function_path, "resolve_duplicates.R"))
source(file.path(function_path, "correct_child_vpids.R"))
source(file.path(function_path, "check_vpid_forms.R"))
source(file.path(function_path, "find_pilot_ids.R"))
source(file.path(function_path, "compare_vpcodes.R"))
source(file.path(function_path, "remove_empty_obs_psytoolkit.R"))
source(file.path(function_path, "collect_ids_to_excel.R"))
source(file.path(function_path, "move_old_backbones.R"))
source(file.path(function_path, "setup_logging.R"))
## Move old Data ---------------------------------------------------------------
move_old_backbones(out_path, dry_run = FALSE)
## Setup Logging ---------------------------------------------------------------
logger <- setup_logging("logs/all_action_points.log")
## Backbone surveys ------------------------------------------------------------
file_adults            <- "results-survey564757_remids_translated.csv"
file_adolescents       <- "results-survey585676.csv"
file_children_parents  <- "results-survey798916_remids_translated.csv"
file_parents_p6        <- "results-survey191355.csv"
file_children_p6       <- "results-survey518972.csv"
## Load data -------------------------------------------------------------------
# Questionnaires
dat_adults           <- read.csv(file.path(project_root, in_path, file_adults), sep = ";")
dat_adolescents      <- read.csv(file.path(project_root, in_path, file_adolescents), sep = ";")
dat_children_parents <- read.csv(file.path(project_root, in_path, file_children_parents), sep = ";")
dat_parents_p6       <- read.csv(file.path(project_root, in_path, file_parents_p6), sep = ";")
dat_children_p6      <- read.csv(file.path(project_root, in_path, file_children_p6), sep = ";")
# Data Overview
file_general <- "results-survey415148.csv"
dat_general  <- read.csv(file.path(project_root, in_path, file_general), sep = ";")
# Psytoolkit Tests
file_psytool_info       <- "data.csv"
psytool_info_adults     <- read.csv(file.path(project_root, psytool_path, "adults", file_psytool_info))
psytool_info_children   <- read.csv(file.path(project_root, psytool_path, "children", file_psytool_info))
psytool_info_adolescents<- read.csv(file.path(project_root, psytool_path, "adolescents", file_psytool_info))
# Build questionnaire metadata safely (no c() mixing types) --------------------
meta_row <- function(path, sample) {
info <- file.info(path)
tibble::tibble(
file          = path,
size          = info$size,
isdir         = info$isdir,
mode          = info$mode,
mtime         = info$mtime,
ctime         = info$ctime,
atime         = info$atime,
uid           = info$uid,
gid           = info$gid,
uname         = info$uname,
grname        = info$grname,
sample        = sample
)
}
quest_info <- dplyr::bind_rows(
meta_row(file.path(project_root, in_path, file_adults),            "adults"),
meta_row(file.path(project_root, in_path, file_adolescents),       "adolescents"),
meta_row(file.path(project_root, in_path, file_children_parents),  "children_parents"),
meta_row(file.path(project_root, in_path, file_parents_p6),        "parents_p6"),
meta_row(file.path(project_root, in_path, file_children_p6),       "children_p6")
)
cogtest_info <- dplyr::bind_rows(
meta_row(file.path(project_root, psytool_path, "adults",      file_psytool_info), "adults"),
meta_row(file.path(project_root, psytool_path, "adolescents", file_psytool_info), "adolescents"),
meta_row(file.path(project_root, psytool_path, "children",    file_psytool_info), "children_parents")
)
# remove Test Datasets from all Project data -----------------------------------
dat_adults           <- remove_test_rows(dat_adults,           "Adults",     dat_general)
dat_adolescents      <- remove_test_rows(dat_adolescents,      "Adolescents",dat_general)
dat_children_parents <- remove_test_rows(dat_children_parents, "Children",   dat_general)
dat_parents_p6       <- remove_test_rows(dat_parents_p6,       "Children",   dat_general)
dat_children_p6      <- remove_test_rows(dat_children_p6,      "Children",   dat_general)
psytool_info_adults      <- remove_test_rows(psytool_info_adults,      "Adults",     dat_general)
psytool_info_adolescents <- remove_test_rows(psytool_info_adolescents, "Adolescents",dat_general)
psytool_info_children    <- remove_test_rows(psytool_info_children,    "Children",   dat_general)
################################################################################
## Data Cleaning for Questionnaire Data ----------------------------------------
################################################################################
# Column names (questionnaires)
vp_col_q      <- "vpid"
project_col_q <- "project"
last_page_q   <- "lastpage"
link_col_q    <- "comp"
id_col_q      <- "id"          # questionnaire unique row number
submit_col_q  <- "submitdate"
# Fix issues with project assignment -------------------------------------------
# remove dead reads; keep only assignments
dat_adults[[project_col_q]][dat_adults[[vp_col_q]] == 2048]  <- 2
dat_adults[[project_col_q]][dat_adults[[vp_col_q]] == 99017] <- 9
# Remove empty Rows -------------------------------------------------------------
# parse date safely where needed later (done below for specific ops)
LAST_P_EMPTY <- 6
# Project 3
PROJECT <- 3
empty_ad_3 <- dat_adults           [dat_adults[[last_page_q]] < LAST_P_EMPTY & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[!(dat_adults[[project_col_q]] == PROJECT & dat_adults[[last_page_q]] < LAST_P_EMPTY), ]
empty_ch_3 <- dat_children_parents [dat_children_parents[[last_page_q]] < LAST_P_EMPTY & dat_children_parents[[project_col_q]] == PROJECT, ]
dat_children_parents <- dat_children_parents[!(dat_children_parents[[last_page_q]] < LAST_P_EMPTY & dat_children_parents[[project_col_q]] == PROJECT), ]
# Project 6 (different questionnaire)
LAST_P_EMPTY <- 3
empty_ch_6 <- dat_children_p6[dat_children_p6[[last_page_q]] < LAST_P_EMPTY, ]
dat_children_p6 <- dat_children_p6[!(dat_children_p6[[last_page_q]] < LAST_P_EMPTY), ]
empty_p_6 <- dat_parents_p6[dat_parents_p6[[last_page_q]] < LAST_P_EMPTY, ]
dat_parents_p6 <- dat_parents_p6[!(dat_parents_p6[[last_page_q]] < LAST_P_EMPTY), ]
# Project 7
PROJECT <- 7
LAST_P_EMPTY <- 6
empty_ad_7 <- dat_adults[ (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY) & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[ !(dat_adults[[project_col_q]] == PROJECT & (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY)), ]
empty_adlsc_7 <- dat_adolescents[ (dat_adolescents[[link_col_q]] == "cogn" | dat_adolescents[[last_page_q]] < LAST_P_EMPTY) & dat_adolescents[[project_col_q]] == PROJECT, ]
dat_adolescents <- dat_adolescents[ !(dat_adolescents[[project_col_q]] == PROJECT & (dat_adolescents[[link_col_q]] == "cogn" | dat_adolescents[[last_page_q]] < LAST_P_EMPTY)), ]
# Project 8
PROJECT <- 8
empty_ad_8 <- dat_adults[ (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY) & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[ !(dat_adults[[project_col_q]] == PROJECT & (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY)), ]
empty_ch_8 <- dat_children_parents[ (dat_children_parents[[link_col_q]] == "cogn" | dat_children_parents[[last_page_q]] < LAST_P_EMPTY) & dat_children_parents[[project_col_q]] == PROJECT, ]
dat_children_parents <- dat_children_parents[ !(dat_children_parents[[project_col_q]] == PROJECT & (dat_children_parents[[link_col_q]] == "cogn" | dat_children_parents[[last_page_q]] < LAST_P_EMPTY)), ]
# Project 9
PROJECT <- 9
empty_ad_9 <- dat_adults[ (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY) & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[ !(dat_adults[[project_col_q]] == PROJECT & (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY)), ]
# Collect empties ---------------------------------------------------------------
ads <- list(empty_ad_3, empty_ad_7, empty_ad_8, empty_ad_9)
ch  <- list(empty_ch_3, empty_ch_8)
ads_non_empty <- ads[lengths(ads) > 0]
chs_non_empty <- ch[lengths(ch) > 0]
all_empty_ad <- if (length(ads_non_empty) > 0) do.call(rbind, ads_non_empty) else data.frame()
all_empty_ch <- if (length(chs_non_empty) > 0) do.call(rbind, chs_non_empty) else data.frame()
# mark reasons for later export
all_empty_ad$.__reason__.    <- "empty"
all_empty_ch$.__reason__.    <- "empty"
empty_adlsc_7$.__reason__.   <- "empty"
# Fix ID naming issues (questionnaires) ----------------------------------------
# Project 2
PROJECT <- 2
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 20035] <- 20036
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 4    & dat_adults[[project_col_q]] == PROJECT] <- 20004
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 6    & dat_adults[[project_col_q]] == PROJECT] <- 20006
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 15   & dat_adults[[project_col_q]] == PROJECT] <- 20015
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2023 & dat_adults[[project_col_q]] == PROJECT] <- 20023
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 26   & dat_adults[[project_col_q]] == PROJECT] <- 20026
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 35   & dat_adults[[project_col_q]] == PROJECT] <- 20035
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2041 & dat_adults[[project_col_q]] == PROJECT] <- 20041
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2044 & dat_adults[[project_col_q]] == PROJECT] <- 20044
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2046 & dat_adults[[project_col_q]] == PROJECT] <- 20046
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2048 & dat_adults[[project_col_q]] == PROJECT] <- 20048
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2051 & dat_adults[[project_col_q]] == PROJECT] <- 20051
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2052 & dat_adults[[project_col_q]] == PROJECT] <- 20052
# Project 3
PROJECT <- 3
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 1     & dat_adults[[project_col_q]] == PROJECT] <- 30001
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 3     & dat_adults[[project_col_q]] == PROJECT] <- 30003
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 8     & dat_adults[[project_col_q]] == PROJECT] <- 30008
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 9     & dat_adults[[project_col_q]] == PROJECT] <- 30009
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10002 & dat_adults[[project_col_q]] == PROJECT] <- 30002
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10005 & dat_adults[[project_col_q]] == PROJECT] <- 30005
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10006 & dat_adults[[project_col_q]] == PROJECT] <- 30006
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10007 & dat_adults[[project_col_q]] == PROJECT] <- 30007
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 40019 & dat_adults[[project_col_q]] == PROJECT] <- 30019
# falsely named datasets by questionnaire row id
dat_adults <- dat_adults %>%
mutate(startdate = as.POSIXct(startdate, tz = "UTC")) %>%   # safe parse (Point 13)
group_by(.data[[id_col_q]]) %>%
mutate(
!!vp_col_q := dplyr::case_when(
.data[[id_col_q]] == 227 & .data[[project_col_q]] == 3 ~ 30047,
.data[[id_col_q]] == 316 & .data[[project_col_q]] == 3 ~ 30057,
TRUE ~ .data[[vp_col_q]]
)
) %>%
ungroup() %>%
mutate(startdate = as.Date(startdate))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# FOR: Backbone Separate Data by Project
# Author: Saskia Wilken (saskia.wilken@uni-hamburg.de) & Antonia Bott (antonia.bott@uni-hamburg.de)
# 2025-08-08 (Date initially edited by SW)
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This script
# (1) reads questionnaire data exported from LimeSurvey and PsyToolkit
# (2) fixes issues with VP ID assignment
# (3) creates project-specific data files in the environment as well as on disk
# clean up R environment
rm(list = ls())
if (interactive()) cat("\014")
# install & load packages ------------------------------------------------------
pkgs <- c("dplyr", "tidyr", "writexl", "openxlsx", "rstudioapi")
for (p in pkgs) if (!requireNamespace(p, quietly = TRUE)) install.packages(p, dependencies = TRUE)
lapply(pkgs, require, character.only = TRUE)
# number display (scoped) ------------------------------------------------------
.old_opts <- options(scipen = 999)
on.exit(options(.old_opts), add = TRUE)
# Get Today -------------------------------------------------------------------
today <- format(Sys.Date(), "%Y-%m-%d")
## Working directory (CLI override + hostname fallback) ------------------------
whoami <- Sys.info()[["nodename"]]
args <- commandArgs(trailingOnly = TRUE)
if (length(args) >= 1 && dir.exists(args[1])) {
project_root <- normalizePath(args[1])
} else {
project_root <- switch(
whoami,
"KOPSY-D-033080" = normalizePath("K:/vol2011/bba3488/", mustWork = FALSE),
"UN-LAP-015977"  = tryCatch(dirname(rstudioapi::getSourceEditorContext()$path), error = function(e) getwd()),
getwd()  # default fallback
)
}
setwd(project_root)
in_path          <- file.path("raw_data")
out_path         <- file.path("01_project_data")
survey_out_path  <- file.path(out_path, "survey_data")
function_path    <- file.path("functions")
psytool_path     <- file.path("raw_data", "psytoolkit")
cogtest_out_path <- file.path(out_path, "experiment_data")
discarded_path   <- file.path(out_path, "discarded")
# Ensure key folders exist
dir.create(discarded_path,   recursive = TRUE, showWarnings = FALSE)
dir.create(survey_out_path,  recursive = TRUE, showWarnings = FALSE)
dir.create(cogtest_out_path, recursive = TRUE, showWarnings = FALSE)
## Source required functions ---------------------------------------------------
source(file.path(function_path, "separate_by_project.R"))
source(file.path(function_path, "remove_test_rows.R"))
source(file.path(function_path, "copy_psytool_files.R"))
source(file.path(function_path, "extract_pilot_by_vpid.R"))
source(file.path(function_path, "resolve_duplicates.R"))
source(file.path(function_path, "correct_child_vpids.R"))
source(file.path(function_path, "check_vpid_forms.R"))
source(file.path(function_path, "find_pilot_ids.R"))
source(file.path(function_path, "compare_vpcodes.R"))
source(file.path(function_path, "remove_empty_obs_psytoolkit.R"))
source(file.path(function_path, "collect_ids_to_excel.R"))
source(file.path(function_path, "move_old_backbones.R"))
source(file.path(function_path, "setup_logging.R"))
## Move old Data ---------------------------------------------------------------
move_old_backbones(out_path, dry_run = FALSE)
## Setup Logging ---------------------------------------------------------------
logger <- setup_logging("logs/all_action_points.log")
## Backbone surveys ------------------------------------------------------------
file_adults            <- "results-survey564757_remids_translated.csv"
file_adolescents       <- "results-survey585676.csv"
file_children_parents  <- "results-survey798916_remids_translated.csv"
file_parents_p6        <- "results-survey191355.csv"
file_children_p6       <- "results-survey518972.csv"
## Load data -------------------------------------------------------------------
# Questionnaires
dat_adults           <- read.csv(file.path(project_root, in_path, file_adults), sep = ";")
dat_adolescents      <- read.csv(file.path(project_root, in_path, file_adolescents), sep = ";")
dat_children_parents <- read.csv(file.path(project_root, in_path, file_children_parents), sep = ";")
dat_parents_p6       <- read.csv(file.path(project_root, in_path, file_parents_p6), sep = ";")
dat_children_p6      <- read.csv(file.path(project_root, in_path, file_children_p6), sep = ";")
# Data Overview
file_general <- "results-survey415148.csv"
dat_general  <- read.csv(file.path(project_root, in_path, file_general), sep = ";")
# Psytoolkit Tests
file_psytool_info       <- "data.csv"
psytool_info_adults     <- read.csv(file.path(project_root, psytool_path, "adults", file_psytool_info))
psytool_info_children   <- read.csv(file.path(project_root, psytool_path, "children", file_psytool_info))
psytool_info_adolescents<- read.csv(file.path(project_root, psytool_path, "adolescents", file_psytool_info))
# Build questionnaire metadata safely (no c() mixing types) --------------------
meta_row <- function(path, sample) {
info <- file.info(path)
tibble::tibble(
file          = path,
size          = info$size,
isdir         = info$isdir,
mode          = info$mode,
mtime         = info$mtime,
ctime         = info$ctime,
atime         = info$atime,
uid           = info$uid,
gid           = info$gid,
uname         = info$uname,
grname        = info$grname,
sample        = sample
)
}
quest_info <- dplyr::bind_rows(
meta_row(file.path(project_root, in_path, file_adults),            "adults"),
meta_row(file.path(project_root, in_path, file_adolescents),       "adolescents"),
meta_row(file.path(project_root, in_path, file_children_parents),  "children_parents"),
meta_row(file.path(project_root, in_path, file_parents_p6),        "parents_p6"),
meta_row(file.path(project_root, in_path, file_children_p6),       "children_p6")
)
cogtest_info <- dplyr::bind_rows(
meta_row(file.path(project_root, psytool_path, "adults",      file_psytool_info), "adults"),
meta_row(file.path(project_root, psytool_path, "adolescents", file_psytool_info), "adolescents"),
meta_row(file.path(project_root, psytool_path, "children",    file_psytool_info), "children_parents")
)
# remove Test Datasets from all Project data -----------------------------------
dat_adults           <- remove_test_rows(dat_adults,           "Adults",     dat_general)
dat_adolescents      <- remove_test_rows(dat_adolescents,      "Adolescents",dat_general)
dat_children_parents <- remove_test_rows(dat_children_parents, "Children",   dat_general)
dat_parents_p6       <- remove_test_rows(dat_parents_p6,       "Children",   dat_general)
dat_children_p6      <- remove_test_rows(dat_children_p6,      "Children",   dat_general)
psytool_info_adults      <- remove_test_rows(psytool_info_adults,      "Adults",     dat_general)
psytool_info_adolescents <- remove_test_rows(psytool_info_adolescents, "Adolescents",dat_general)
psytool_info_children    <- remove_test_rows(psytool_info_children,    "Children",   dat_general)
################################################################################
## Data Cleaning for Questionnaire Data ----------------------------------------
################################################################################
# Column names (questionnaires)
vp_col_q      <- "vpid"
project_col_q <- "project"
last_page_q   <- "lastpage"
link_col_q    <- "comp"
id_col_q      <- "id"          # questionnaire unique row number
submit_col_q  <- "submitdate"
# Fix issues with project assignment -------------------------------------------
# remove dead reads; keep only assignments
dat_adults[[project_col_q]][dat_adults[[vp_col_q]] == 2048]  <- 2
dat_adults[[project_col_q]][dat_adults[[vp_col_q]] == 99017] <- 9
# Remove empty Rows -------------------------------------------------------------
# parse date safely where needed later (done below for specific ops)
LAST_P_EMPTY <- 6
# Project 3
PROJECT <- 3
empty_ad_3 <- dat_adults           [dat_adults[[last_page_q]] < LAST_P_EMPTY & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[!(dat_adults[[project_col_q]] == PROJECT & dat_adults[[last_page_q]] < LAST_P_EMPTY), ]
empty_ch_3 <- dat_children_parents [dat_children_parents[[last_page_q]] < LAST_P_EMPTY & dat_children_parents[[project_col_q]] == PROJECT, ]
dat_children_parents <- dat_children_parents[!(dat_children_parents[[last_page_q]] < LAST_P_EMPTY & dat_children_parents[[project_col_q]] == PROJECT), ]
# Project 6 (different questionnaire)
LAST_P_EMPTY <- 3
empty_ch_6 <- dat_children_p6[dat_children_p6[[last_page_q]] < LAST_P_EMPTY, ]
dat_children_p6 <- dat_children_p6[!(dat_children_p6[[last_page_q]] < LAST_P_EMPTY), ]
empty_p_6 <- dat_parents_p6[dat_parents_p6[[last_page_q]] < LAST_P_EMPTY, ]
dat_parents_p6 <- dat_parents_p6[!(dat_parents_p6[[last_page_q]] < LAST_P_EMPTY), ]
# Project 7
PROJECT <- 7
LAST_P_EMPTY <- 6
empty_ad_7 <- dat_adults[ (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY) & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[ !(dat_adults[[project_col_q]] == PROJECT & (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY)), ]
empty_adlsc_7 <- dat_adolescents[ (dat_adolescents[[link_col_q]] == "cogn" | dat_adolescents[[last_page_q]] < LAST_P_EMPTY) & dat_adolescents[[project_col_q]] == PROJECT, ]
dat_adolescents <- dat_adolescents[ !(dat_adolescents[[project_col_q]] == PROJECT & (dat_adolescents[[link_col_q]] == "cogn" | dat_adolescents[[last_page_q]] < LAST_P_EMPTY)), ]
# Project 8
PROJECT <- 8
empty_ad_8 <- dat_adults[ (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY) & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[ !(dat_adults[[project_col_q]] == PROJECT & (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY)), ]
empty_ch_8 <- dat_children_parents[ (dat_children_parents[[link_col_q]] == "cogn" | dat_children_parents[[last_page_q]] < LAST_P_EMPTY) & dat_children_parents[[project_col_q]] == PROJECT, ]
dat_children_parents <- dat_children_parents[ !(dat_children_parents[[project_col_q]] == PROJECT & (dat_children_parents[[link_col_q]] == "cogn" | dat_children_parents[[last_page_q]] < LAST_P_EMPTY)), ]
# Project 9
PROJECT <- 9
empty_ad_9 <- dat_adults[ (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY) & dat_adults[[project_col_q]] == PROJECT, ]
dat_adults <- dat_adults[ !(dat_adults[[project_col_q]] == PROJECT & (dat_adults[[link_col_q]] == "cogn" | dat_adults[[last_page_q]] < LAST_P_EMPTY)), ]
# Collect empties ---------------------------------------------------------------
ads <- list(empty_ad_3, empty_ad_7, empty_ad_8, empty_ad_9)
ch  <- list(empty_ch_3, empty_ch_8)
ads_non_empty <- ads[lengths(ads) > 0]
chs_non_empty <- ch[lengths(ch) > 0]
all_empty_ad <- if (length(ads_non_empty) > 0) do.call(rbind, ads_non_empty) else data.frame()
all_empty_ch <- if (length(chs_non_empty) > 0) do.call(rbind, chs_non_empty) else data.frame()
# mark reasons for later export
all_empty_ad$.__reason__.    <- "empty"
all_empty_ch$.__reason__.    <- "empty"
empty_adlsc_7$.__reason__.   <- "empty"
# Fix ID naming issues (questionnaires) ----------------------------------------
# Project 2
PROJECT <- 2
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 20035] <- 20036
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 4    & dat_adults[[project_col_q]] == PROJECT] <- 20004
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 6    & dat_adults[[project_col_q]] == PROJECT] <- 20006
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 15   & dat_adults[[project_col_q]] == PROJECT] <- 20015
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2023 & dat_adults[[project_col_q]] == PROJECT] <- 20023
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 26   & dat_adults[[project_col_q]] == PROJECT] <- 20026
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 35   & dat_adults[[project_col_q]] == PROJECT] <- 20035
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2041 & dat_adults[[project_col_q]] == PROJECT] <- 20041
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2044 & dat_adults[[project_col_q]] == PROJECT] <- 20044
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2046 & dat_adults[[project_col_q]] == PROJECT] <- 20046
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2048 & dat_adults[[project_col_q]] == PROJECT] <- 20048
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2051 & dat_adults[[project_col_q]] == PROJECT] <- 20051
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 2052 & dat_adults[[project_col_q]] == PROJECT] <- 20052
# Project 3
PROJECT <- 3
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 1     & dat_adults[[project_col_q]] == PROJECT] <- 30001
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 3     & dat_adults[[project_col_q]] == PROJECT] <- 30003
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 8     & dat_adults[[project_col_q]] == PROJECT] <- 30008
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 9     & dat_adults[[project_col_q]] == PROJECT] <- 30009
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10002 & dat_adults[[project_col_q]] == PROJECT] <- 30002
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10005 & dat_adults[[project_col_q]] == PROJECT] <- 30005
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10006 & dat_adults[[project_col_q]] == PROJECT] <- 30006
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 10007 & dat_adults[[project_col_q]] == PROJECT] <- 30007
dat_adults[[vp_col_q]][dat_adults[[vp_col_q]] == 40019 & dat_adults[[project_col_q]] == PROJECT] <- 30019
# falsely named datasets by questionnaire row id  ------------------------------
dat_adults <- dat_adults %>%
mutate(
# parse first, so we can safely round-trip to Date later
startdate = as.POSIXct(startdate, tz = "UTC"),
# ensure vpid is numeric before case_when (prevents mixed-type errors)
!!vp_col_q := suppressWarnings(as.numeric(.data[[vp_col_q]]))
) %>%
group_by(.data[[id_col_q]]) %>%
mutate(
!!vp_col_q := dplyr::case_when(
.data[[id_col_q]] == 227 & .data[[project_col_q]] == 3 ~ 30047,
.data[[id_col_q]] == 316 & .data[[project_col_q]] == 3 ~ 30057,
TRUE ~ .data[[vp_col_q]]
)
) %>%
ungroup() %>%
# convert back to Date for downstream filters/comparisons that expect Date
mutate(startdate = as.Date(startdate))
# Gather Pilot Participant IDs --------------------------------------------------
pilots_ad_auto  <- find_pilot_ids(dat_general, dat_adults)
pilots_asc_auto <- find_pilot_ids(dat_general, dat_adolescents)
pilots_ch_auto  <- find_pilot_ids(dat_general, dat_children_parents)
pilot_ad_2 <- c(20004)
pilot_ad_9 <- c()
pilot_ad_8 <- c(80350)
pilot_asc_7 <- c()
pilot_ch_6 <- c(62973, 62980, 62998, 62992, 62987, 62989, 62994, 62970)
pilot_ad_all  <- c(pilot_ad_2, pilot_ad_9, pilot_ad_8, pilots_ad_auto)
pilot_asc_all <- c(pilots_asc_auto)
pilots_ch_all <- c(pilots_ch_auto, pilot_ch_6)
# Move pilots out ---------------------------------------------------------------
dat_adults <- extract_pilot_by_vpid(
dat_adults,
out_path  = file.path(out_path, "pilots"),
export_csv = FALSE,
pilot_ids  = pilot_ad_all,
sample     = "adults",
vpid_col   = "vpid"
)
dat_adolescents <- extract_pilot_by_vpid(
dat_adolescents,
out_path  = file.path(out_path, "pilots"),
export_csv = FALSE,
pilot_ids  = pilot_asc_all,
sample     = "adolescents",
vpid_col   = "vpid"
)
dat_children_parents <- extract_pilot_by_vpid(
dat_children_parents,
out_path  = file.path(out_path, "pilots"),
export_csv = FALSE,
pilot_ids  = pilots_ch_all,
sample     = "children_parents",
vpid_col   = "vpid"
)
dat_children_p6 <- extract_pilot_by_vpid(
dat_children_p6,
out_path  = file.path(out_path, "pilots"),
export_csv = FALSE,
pilot_ids  = pilots_ch_all,
sample     = "children_p6",
vpid_col   = "VPCode"
)
dat_parents_p6 <- extract_pilot_by_vpid(
dat_parents_p6,
out_path  = file.path(out_path, "pilots"),
export_csv = FALSE,
pilot_ids  = pilots_ch_all,
sample     = "parents_p6",
vpid_col   = "VPCode"
)
# Handle duplicate IDs ----------------------------------------------------------
# Adults
res_adults <- resolve_duplicates(
dat_adults, vp_col_q, submit_col_q,
dataset_name = "adults", data_type = "questionnaire", project_col_q, logger = logger
)
dat_adults <- res_adults$cleaned
trash_adults <- res_adults$trash_bin
# Adolescents
res_adolescents <- resolve_duplicates(
dat_adolescents, vp_col_q, submit_col_q,
dataset_name = "adolescents", data_type = "questionnaire", project_col_q, logger = logger
)
dat_adolescents <- res_adolescents$cleaned
trash_adolescents <- res_adolescents$trash_bin
# Children/Parents
res_children_parents <- resolve_duplicates(
dat_children_parents, vp_col_q, submit_col_q,
dataset_name = "children_parents", data_type = "questionnaire", project_col_q, logger = logger
)
dat_children_parents <- res_children_parents$cleaned
trash_children_parents <- res_children_parents$trash_bin
# Project 6 children/parents use VPCode
vp_col_p6 <- "VPCode"
res_children_p6 <- resolve_duplicates(
dat_children_p6, vp_col_p6, submit_col_q,
dataset_name = "children_p6", data_type = "questionnaire", project_col_q,
lastpage_threshold = 13,   # Point 5: named argument
logger = logger
)
dat_children_p6 <- res_children_p6$cleaned
trash_children_p6 <- res_children_p6$trash_bin
res_parents_p6 <- resolve_duplicates(
dat_parents_p6, vp_col_p6, submit_col_q,
dataset_name = "parents_p6", data_type = "questionnaire", project_col_q,
lastpage_threshold = 13,   # Point 5: named argument
logger = logger
)
dat_parents_p6 <- res_parents_p6$cleaned
trash_parents_p6 <- res_parents_p6$trash_bin
# Special Case Project 8: Check if all children_parents questionnaire sets have C, P and A
check_vpid_forms(dat_children_parents)
check_vpid_forms(dat_children_parents)
dat_children_parents

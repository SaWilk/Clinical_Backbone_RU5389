# 2025-08-26
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This script
# - reads the "children/parents" questionnaire data
# - loads Remote ↔ Participant ID mappings from the Excel sheet "Combined"
# - for rows with a non-empty remid, looks up remote_IDs and writes the matching participant_IDs into vpid
# - saves the updated data as "results-survey798916_remids_translated.csv"
# clean up R environment
rm(list = ls())
cat("\014")
# install & load required packages --------------------------------------------
pkg <- c("dplyr", "readxl", "rstudioapi")
to_install <- pkg[!sapply(pkg, require, character.only = TRUE)]
if (length(to_install)) install.packages(to_install, dependencies = TRUE)
invisible(lapply(pkg, library, character.only = TRUE))
# number display ---------------------------------------------------------------
options(scipen = 999)
# paths ------------------------------------------------------------------------
# Script directory (works in RStudio; falls back to current working directory)
script_dir <- tryCatch(dirname(rstudioapi::getSourceEditorContext()$path),
error = function(e) getwd())
in_path      <- file.path(script_dir, "raw_data")
info_path    <- file.path(script_dir, "information")
file_children_parents <- "results-survey798916.csv"
file_out               <- "results-survey798916_remids_translated.csv"
xlsx_file              <- "2025-08-20_Remote-IDs_Projekt_8_Extended_SW.xlsx"
xlsx_sheet             <- "Combined"
# load data --------------------------------------------------------------------
dat_children_parents <- read.csv(file.path(in_path, file_children_parents),
sep = ";", stringsAsFactors = FALSE, check.names = FALSE)
in_path
script_dir
dirname(rstudioapi::getSourceEditorContext()$path),
dirname(rstudioapi::getSourceEditorContext()$path)
rstudioapi::getSourceEditorContext()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# FOR: translate remids
# Author: Saskia Wilken (saskia.wilken@uni-hamburg.de)
# 2025-08-26
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This script
# - reads the "children/parents" questionnaire data
# - loads Remote ↔ Participant ID mappings from the Excel sheet "Combined"
# - for rows with a non-empty remid, looks up remote_IDs and writes the matching participant_IDs into vpid
# - saves the updated data as "results-survey798916_remids_translated.csv"
# clean up R environment
rm(list = ls())
cat("\014")
# install & load required packages --------------------------------------------
pkg <- c("dplyr", "readxl", "rstudioapi")
to_install <- pkg[!sapply(pkg, require, character.only = TRUE)]
if (length(to_install)) install.packages(to_install, dependencies = TRUE)
invisible(lapply(pkg, library, character.only = TRUE))
# number display ---------------------------------------------------------------
options(scipen = 999)
# paths ------------------------------------------------------------------------
# Script directory (works in RStudio; falls back to current working directory)
script_dir <- tryCatch(dirname(rstudioapi::getSourceEditorContext()$path),
error = function(e) getwd())
in_path      <- file.path(script_dir, "raw_data")
info_path    <- file.path(script_dir, "information")
file_children_parents <- "results-survey798916.csv"
file_out               <- "results-survey798916_remids_translated.csv"
xlsx_file              <- "2025-08-20_Remote-IDs_Projekt_8_Extended_SW.xlsx"
xlsx_sheet             <- "Combined"
# load data --------------------------------------------------------------------
dat_children_parents <- read.csv(file.path(in_path, file_children_parents),
sep = ";", stringsAsFactors = FALSE, check.names = FALSE)
# load mapping (participant_IDs, remote_IDs) from Excel ------------------------
map_ids_raw <- readxl::read_excel(file.path(info_path, xlsx_file),
sheet = xlsx_sheet)
# keep only needed columns, coerce to character, and standardize for safe joins
map_ids <- map_ids_raw |>
dplyr::select(participant_IDs, remote_IDs) |>
dplyr::mutate(
participant_IDs = as.character(participant_IDs),
remote_IDs      = as.character(remote_IDs),
remote_IDs_std  = tolower(trimws(remote_IDs))
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# FOR: translate remids
# Author: Saskia Wilken (saskia.wilken@uni-hamburg.de)
# 2025-08-26
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This script
# - reads the "children/parents" questionnaire data
# - loads Remote ↔ Participant ID mappings from the Excel sheet "Combined"
# - for rows with a non-empty remid, looks up remote_ID and writes the matching participant_ID into vpid
# - saves the updated data as "results-survey798916_remids_translated.csv"
# clean up R environment
rm(list = ls())
cat("\014")
# install & load required packages --------------------------------------------
pkg <- c("dplyr", "readxl", "rstudioapi")
to_install <- pkg[!sapply(pkg, require, character.only = TRUE)]
if (length(to_install)) install.packages(to_install, dependencies = TRUE)
invisible(lapply(pkg, library, character.only = TRUE))
# number display ---------------------------------------------------------------
options(scipen = 999)
# paths ------------------------------------------------------------------------
# Script directory (works in RStudio; falls back to current working directory)
script_dir <- tryCatch(dirname(rstudioapi::getSourceEditorContext()$path),
error = function(e) getwd())
in_path      <- file.path(script_dir, "raw_data")
info_path    <- file.path(script_dir, "information")
file_children_parents <- "results-survey798916.csv"
file_out               <- "results-survey798916_remids_translated.csv"
xlsx_file              <- "2025-08-20_Remote-IDs_Projekt_8_Extended_SW.xlsx"
xlsx_sheet             <- "Combined"
# load data --------------------------------------------------------------------
dat_children_parents <- read.csv(file.path(in_path, file_children_parents),
sep = ";", stringsAsFactors = FALSE, check.names = FALSE)
# load mapping (participant_ID, Remote_ID) from Excel ------------------------
map_ids_raw <- readxl::read_excel(file.path(info_path, xlsx_file),
sheet = xlsx_sheet)
# keep only needed columns, coerce to character, and standardize for safe joins
map_ids <- map_ids_raw |>
dplyr::select(participant_ID, remote_ID) |>
dplyr::mutate(
participant_ID = as.character(participant_ID),
remote_ID      = as.character(Remote_ID),
remote_ID_std  = tolower(trimws(Remote_ID))
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# FOR: translate remids
# Author: Saskia Wilken (saskia.wilken@uni-hamburg.de)
# 2025-08-26
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This script
# - reads the "children/parents" questionnaire data
# - loads Remote ↔ Participant ID mappings from the Excel sheet "Combined"
# - for rows with a non-empty remid, looks up remote_ID and writes the matching Participant_ID into vpid
# - saves the updated data as "results-survey798916_remids_translated.csv"
# clean up R environment
rm(list = ls())
cat("\014")
# install & load required packages --------------------------------------------
pkg <- c("dplyr", "readxl", "rstudioapi")
to_install <- pkg[!sapply(pkg, require, character.only = TRUE)]
if (length(to_install)) install.packages(to_install, dependencies = TRUE)
invisible(lapply(pkg, library, character.only = TRUE))
# number display ---------------------------------------------------------------
options(scipen = 999)
# paths ------------------------------------------------------------------------
# Script directory (works in RStudio; falls back to current working directory)
script_dir <- tryCatch(dirname(rstudioapi::getSourceEditorContext()$path),
error = function(e) getwd())
in_path      <- file.path(script_dir, "raw_data")
info_path    <- file.path(script_dir, "information")
file_children_parents <- "results-survey798916.csv"
file_out               <- "results-survey798916_remids_translated.csv"
xlsx_file              <- "2025-08-20_Remote-IDs_Projekt_8_Extended_SW.xlsx"
xlsx_sheet             <- "Combined"
# load data --------------------------------------------------------------------
dat_children_parents <- read.csv(file.path(in_path, file_children_parents),
sep = ";", stringsAsFactors = FALSE, check.names = FALSE)
# load mapping (Participant_ID, Remote_ID) from Excel ------------------------
map_ids_raw <- readxl::read_excel(file.path(info_path, xlsx_file),
sheet = xlsx_sheet)
# keep only needed columns, coerce to character, and standardize for safe joins
map_ids <- map_ids_raw |>
dplyr::select(Participant_ID, remote_ID) |>
dplyr::mutate(
Participant_ID = as.character(Participant_ID),
remote_ID      = as.character(Remote_ID),
remote_ID_std  = tolower(trimws(Remote_ID))
)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# FOR: translate remids
# Author: Saskia Wilken (saskia.wilken@uni-hamburg.de)
# 2025-08-26
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This script
# - reads the "children/parents" questionnaire data
# - loads Remote ↔ Participant ID mappings from the Excel sheet "Combined"
# - for rows with a non-empty remid, looks up Remote_ID and writes the matching Participant_ID into vpid
# - saves the updated data as "results-survey798916_remids_translated.csv"
# clean up R environment
rm(list = ls())
cat("\014")
# install & load required packages --------------------------------------------
pkg <- c("dplyr", "readxl", "rstudioapi")
to_install <- pkg[!sapply(pkg, require, character.only = TRUE)]
if (length(to_install)) install.packages(to_install, dependencies = TRUE)
invisible(lapply(pkg, library, character.only = TRUE))
# number display ---------------------------------------------------------------
options(scipen = 999)
# paths ------------------------------------------------------------------------
# Script directory (works in RStudio; falls back to current working directory)
script_dir <- tryCatch(dirname(rstudioapi::getSourceEditorContext()$path),
error = function(e) getwd())
in_path      <- file.path(script_dir, "raw_data")
info_path    <- file.path(script_dir, "information")
file_children_parents <- "results-survey798916.csv"
file_out               <- "results-survey798916_remids_translated.csv"
xlsx_file              <- "2025-08-20_Remote-IDs_Projekt_8_Extended_SW.xlsx"
xlsx_sheet             <- "Combined"
# load data --------------------------------------------------------------------
dat_children_parents <- read.csv(file.path(in_path, file_children_parents),
sep = ";", stringsAsFactors = FALSE, check.names = FALSE)
# load mapping (Participant_ID, Remote_ID) from Excel ------------------------
map_ids_raw <- readxl::read_excel(file.path(info_path, xlsx_file),
sheet = xlsx_sheet)
# keep only needed columns, coerce to character, and standardize for safe joins
map_ids <- map_ids_raw |>
dplyr::select(Participant_ID, Remote_ID) |>
dplyr::mutate(
Participant_ID = as.character(Participant_ID),
Remote_ID      = as.character(Remote_ID),
Remote_ID_std  = tolower(trimws(Remote_ID))
)
# ensure remid/vpid exist; create if missing -----------------------------------
if (!"remid" %in% names(dat_children_parents)) {
dat_children_parents$remid <- NA_character_
}
if (!"vpid" %in% names(dat_children_parents)) {
dat_children_parents$vpid <- NA_character_
}
# standardize remid for joining ------------------------------------------------
dat_std <- dat_children_parents |>
dplyr::mutate(remid_std = tolower(trimws(as.character(remid))))
# join & translate remids -> vpid ----------------------------------------------
dat_joined <- dat_std |>
dplyr::left_join(map_ids, by = dplyr::join_by(remid_std == Remote_ID_std)) |>
dplyr::mutate(
vpid = ifelse(!is.na(remid) & nzchar(remid) & !is.na(Participant_ID),
Participant_ID,
vpid)
) |>
dplyr::select(-c(remid_std, Remote_ID_std, Remote_ID, Participant_ID))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# FOR: Backbone Separate Data by Project
# Author: Saskia Wilken (saskia.wilken@uni-hamburg.de) & Antonia Bott (antonia.bott@uni-hamburg.de)
# 2025-08-08 (Date initially edited by SW)
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# This script
# (1) reads questionnaire data exported from LimeSurvey and PsyToolkit
# (2) Fixes Issues with VP ID assignment
# (3) Creates project-specific data files in the environment as well as on disk
# clean up R environment
rm(list=ls())
cat("\014")
# install packages
if(!require("dplyr")){install.packages("dplyr")};library(dplyr)
if(!require("tidyr")){install.packages("tidyr")};library(tidyr)
if(!require("writexl")){install.packages("writexl")};library(tidyr)
# Esure proper number display -------------------------------------------------
options(scipen = 999)  # disable scientific notation globally
# Get Today ----------------------------------------------------------------
